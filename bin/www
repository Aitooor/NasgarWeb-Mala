#!/usr/bin/env node

/**
 * Making the enviroment to global
 */

const CONFIG = require("../config");
const logger = require("../src/lib/logger");
const isProduction = process.env.NODE_ENV === "production" || CONFIG.ENV === "prod";

if(isProduction) {
  process.env.NODE_ENV = "production";
  process.PRODUCTION = true;
} else {
  process.PRODUCTION = false;
}

/**
 * Selecting port and make it global
 */

var port = normalizePort(
  CONFIG.PORT.find(({ port, condition }) => {
    port = port === "env" ? process.env.PORT : port;

    if(condition === "exist")
      return typeof port != "undefined";
    if(condition === "prod")
      return isProduction;
    if(condition === "dev")
      return !isProduction;
  }).port
);

// @ts-ignore
process.env.PORT = port;
process.WEB_HREF = isProduction ? "https://web.nasgar.online" : "http://localhost:"+port

/**
 * Module dependencies.
 */

const http = require("http");
/**
 * @ignore
 * @type {http.Server}
 */
var server = require('../src/index');

/**
 * Get host from environment and store in Express.
 */



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 * @param {string} val
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return 0;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {http} error
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);

    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.log(`Listening on ${bind}. ${process.WEB_HREF}`);
}

// vim: set ft=javascript
